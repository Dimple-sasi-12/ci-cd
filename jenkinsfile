def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
]

pipeline {
    agent any
    environment {
        SCANNER_HOME = tool 'sonarqube'
    }
    stages {
        stage('clean-workspace') {
            steps {
                cleanWs  ()
            }
        }
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Dimple-sasi-12/ci-cd.git'
            }
        }
        stage('Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }
        stage('Code Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh ''' 
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=ci-cd \
                        -Dsonar.java.binaries=. \
                        -Dsonar.projectKey=ci-cd
                    '''
                }
            }
        }
        stage('trivy-scan file') {
            steps {
                sh 'trivy fs --secutiry-checks vuln --severity HIGH,CRITICAL -f json -o file-trivy-scan.json .'
            }
        }
        stage('Remove Containers and Images') {
            steps {
                sh 'docker stop $(docker ps -q) || true'
                sh 'docker rm $(docker ps -aq) || true'
                sh 'docker rmi $(docker images -q) || true'
            }
        }
        stage('Docker Build') {
            steps {
                sh 'docker build -t bunny2003/java .'
            }
        }
        stage('trivy-scan images') {
            steps {
                sh 'trivy --severity LOW,MEDIUM -f table -o image-scan.html bunny2003/java'
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-credential', toolName: 'docker')  {
                    sh 'docker push bunny2003/java'
                    }
                }
            }
        }
        stage('Docker Run Container') {
            steps {
                sh 'docker run -itd -p 8085:8081 bunny2003/java'
            }
        }
    }
    post {
        always {
            echo 'Slack Notification.'
            slackSend channel: '#dev-team',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
